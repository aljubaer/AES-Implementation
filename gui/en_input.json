{"message":"# -*- coding: utf-8 -*-\r\nfrom aes_helper import *\r\n\r\ndef sub_bytes(state):\r\n    state = [s_box[state[i]] for i in range(16)]\r\n    return state\r\n\r\ndef shift_rows(state):\r\n    tmp = [0 for i in range(16)] #create 16 size array\r\n    \r\n    tmp[0] = state[0]\r\n    tmp[1] = state[5]\r\n    tmp[2] = state[10]\r\n    tmp[3] = state[15]\r\n    \r\n    tmp[4] = state[4]\r\n    tmp[5] = state[9]\r\n    tmp[6] = state[14]\r\n    tmp[7] = state[3]\r\n    \r\n    tmp[8] = state[8]\r\n    tmp[9] = state[13]\r\n    tmp[10] = state[2]\r\n    tmp[11] = state[7]\r\n    \r\n    tmp[12] = state[12]\r\n    tmp[13] = state[1]\r\n    tmp[14] = state[6]\r\n    tmp[15] = state[11]\r\n    \r\n    state = tmp\r\n    return state\r\n\r\ndef mix_columns(state):\r\n    tmp = [0 for i in range(16)] #create 16 size array\r\n    tmp[0] = mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3]\r\n    tmp[1] = state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3]\r\n    tmp[2] = state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]]\r\n    tmp[3] = mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]]\r\n\r\n    tmp[4] = mul2[state[4]] ^ mul3[state[5]] ^ state[6] ^ state[7]\r\n    tmp[5] = state[4] ^ mul2[state[5]] ^ mul3[state[6]] ^ state[7]\r\n    tmp[6] = state[4] ^ state[5] ^ mul2[state[6]] ^ mul3[state[7]]\r\n    tmp[7] = mul3[state[4]] ^ state[5] ^ state[6] ^ mul2[state[7]]\r\n\r\n    tmp[8] = mul2[state[8]] ^ mul3[state[9]] ^ state[10] ^ state[11]\r\n    tmp[9] = state[8] ^ mul2[state[9]] ^ mul3[state[10]] ^ state[11]\r\n    tmp[10] = state[8] ^ state[9] ^ mul2[state[10]] ^ mul3[state[11]]\r\n    tmp[11] = mul3[state[8]] ^ state[9] ^ state[10] ^ mul2[state[11]]\r\n\r\n    tmp[12] = mul2[state[12]] ^ mul3[state[13]] ^ state[14] ^ state[15]\r\n    tmp[13] = state[12] ^ mul2[state[13]] ^ mul3[state[14]] ^ state[15]\r\n    tmp[14] = state[12] ^ state[13] ^ mul2[state[14]] ^ mul3[state[15]]\r\n    tmp[15] = mul3[state[12]] ^ state[13] ^ state[14] ^ mul2[state[15]]\r\n\r\n    state = tmp\r\n    return state\r\n\r\ndef add_round_key(state, round_key):\r\n    state = [(state[i] ^ round_key[i]) for i in range(16)]\r\n    return state\r\n\r\ndef round(state, key):\r\n    state = sub_bytes(state)\r\n    state = shift_rows(state)\r\n    state = mix_columns(state)\r\n    state = add_round_key(state, key)\r\n    return state\r\n    \r\ndef final_round(state, key):\r\n    state = sub_bytes(state)\r\n    state = shift_rows(state)\r\n    state = add_round_key(state, key)\r\n    return state\r\n\r\ndef block_cipher_encrypt(message, expanded_key, num_of_rounds):\r\n    \r\n    state = [message[i] for i in range(16)]\r\n    state = add_round_key(state, expanded_key)\r\n    for i in range(num_of_rounds - 1):\r\n        state = round(state, expanded_key[(i + 1) * 16: (i + 2) * 16])\r\n        \r\n    state = final_round(state, expanded_key[10 * 16: 11 * 16])\r\n    return state\r\n","key":"hdfgjd","keylen":"128","outputFile":"aes.bin","aes_mode":"ECB","iv":"treyrutre"}